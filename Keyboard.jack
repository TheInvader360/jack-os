/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        // does nothing... (required to pass comparison tests!)
        return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(24576); // return the char code stored in the keyboard memory map (i.e. the single 16-bit word located at memory address 24576)
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
        var char heldKeyCode, pressedKeyCode;

        do Output.printChar(0); // display the cursor character
        while ((pressedKeyCode = 0) | (heldKeyCode > 0)) { // if no key has been pressed yet, or the same key is still being held down...
            let heldKeyCode = Keyboard.keyPressed();
            if (heldKeyCode > 0) {
                let pressedKeyCode = heldKeyCode;
            }
        }
        do Output.printChar(String.backSpace());
        do Output.printChar(pressedKeyCode);

        return pressedKeyCode;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var char userSuppliedChar, newLineChar, backSpaceChar;
        var String userSuppliedString;
        var boolean userDone;

        let userSuppliedString = String.new(80); // construct an empty string with an arbitrary maximum capacity of 80 characters
        do Output.printString(message);
        let newLineChar = String.newLine(); // avoid making repeated String.newLine() calls...
        let backSpaceChar = String.backSpace(); // avoid making repeated String.backSpace() calls...
        while (~userDone) {
            let userSuppliedChar = Keyboard.readChar();
            let userDone = (userSuppliedChar = newLineChar); // user is done once they hit return
            if (~userDone) {
                if (userSuppliedChar = backSpaceChar) {
                    do userSuppliedString.eraseLastChar();
                } else {
                    let userSuppliedString = userSuppliedString.appendChar(userSuppliedChar);
                }
            }
        }

        return userSuppliedString;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
        var String userSuppliedString;
        var int userSuppliedInt;

        let userSuppliedString = Keyboard.readLine(message);
        let userSuppliedInt = userSuppliedString.intValue(); // parse userSuppliedString as an int (up until a non-digit character is detected)
        do userSuppliedString.dispose();

        return userSuppliedInt;
    }
}
