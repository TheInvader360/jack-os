/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0; // hack to allow addressing ram without constructing the array
        let ram[2048] = 14334; // set available size to the size of all remaining heap space i.e. 16384 (io memory maps base address) - 2048 (heap base address) - 2 (initial segment overhead)
        let ram[2049] = 2050; // set next

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // reverse engineered the provided golden vm file (my own attempt passed the standard tests, but not the full diagnostic tests)
        var int local1;
        var int local2;

        if (size < 0) {
            do Sys.error(5); // error: allocated memory size must be positive
        }
        if (size = 0) {
            let size = 1;
        }
        let local1 = 2048;
        while ((local1 < 16383) & (local1[0] < size)) {
            let local2 = local1[1];

            if ((local1[0] = 0) | (local2 > 16382) | (local2[0] = 0)) {
                let local1 = local2;
            } else {
                let local1[0] = local1[1] - local1 + local2[0];
                if (local2[1] = (local2 + 2)) {
                    let local1[1] = local1 + 2;
                } else {
                    let local1[1] = local2[1];
                }
            }
        }
        if (local1 + size > 16379) {
            do Sys.error(6); // error: heap overflow
        }
        if (local1[0] > (size + 2)) {
            let local1[size + 2] = (local1[0] - size) - 2;
            if (local1[1] = (local1 + 2)) {
                let local1[size + 3] = (local1 + size) + 4;
            } else {
                let local1[size + 3] = local1[1];
            }
            let local1[1] = (local1 + size) + 2;
        }
        let local1[0] = 0;

        return local1 + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        // reverse engineered the provided golden vm file (my own attempt passed the standard tests, but not the full diagnostic tests)
        var int local1, local2;
        
        let local1 = object - 2;
        let local2 = local1[1];
        if (local2[0] = 0) {
            let local1[0] = (local1[1] - local1) - 2;
        } else {
            let local1[0] = (local1[1] - local1) + local2[0];
            if (local2[1] = (local2 + 2)) {
                let local1[1] = local1 + 2;
            } else {
                let local1[1] = local2[1];
            }
        }

        return;
    }
}
