/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0; // hack to allow addressing ram without constructing the array
        let ram[2048] = 14334; // set available size to the size of all remaining heap space i.e. 16384 (io memory maps base address) - 2048 (heap base address) - 2 (initial segment overhead)
        let ram[2049] = 2050; // set next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        //TODO: Implement!
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array object) {
        //TODO: Implement!
        return;
    }
}
